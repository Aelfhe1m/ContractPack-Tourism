// Contract for sending tourists to both moons.
//   Author: nightingale

CONTRACT_TYPE
{
    name = Tourism_TwoMoons
    group = Tourism

    title = Tourism Plus: Multi-moon flyby with @Tourism:touristCount.Print() @Tourism:tourists
    description = These @Tourism:tourists have booked the delux @targetBody package.  Do a near flyby of @targetBody.Children().First() and @targetBody.Children().Last().
    synopsis = Fly by @targetBody's moons with @Tourism:touristCount.Print() @Tourism:tourists.
    completedMessage = The @Tourism:tourists had a great time!

    // Level 3 prestige
    prestige = Exceptional

    targetBody = HomeWorld().Parent().IsPlanet() ? HomeWorld().Parent() : HomeWorld()

    agent = Kerbal Space Tourism

    // Only one of these shows up at a time
    maxSimultaneous = 1

    // Contract rewards
    rewardFunds = 20000.0 + 85000.0 * @Tourism:touristCount + Random(0.0, 10000.0)
    rewardReputation = 4.0
    failureReputation = 20.0

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = Visit both of @/targetBody's moons

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            trait = Pilot
        }

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            disableOnStateChange = true

            maxAltitude = @/targetBody.Children().First().Radius() / 2.0
            targetBody = @/targetBody.Children().First()
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            disableOnStateChange = true

            maxAltitude = @/targetBody.Children().Last().Radius() / 2.0
            targetBody = @/targetBody.Children().ElementAt(1)
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            disableOnStateChange = true

            maxAltitude = @/targetBody.Children().Last().Radius() / 2.0
            targetBody = @/targetBody.Children().ElementAt(2)

            REQUIREMENT
            {
                type = Expression
                expression= @/targetBody.Children().Count() > 2
            }
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            disableOnStateChange = true

            maxAltitude = @/targetBody.Children().Last().Radius() / 2.0
            targetBody = @/targetBody.Children().ElementAt(3)

            REQUIREMENT
            {
                type = Expression
                expression= @/targetBody.Children().Count() > 3
            }
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            disableOnStateChange = true

            maxAltitude = @/targetBody.Children().Last().Radius() / 2.0
            targetBody = @/targetBody.Children().ElementAt(4)

            REQUIREMENT
            {
                type = Expression
                expression= @/targetBody.Children().Count() > 4
            }
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            disableOnStateChange = true

            maxAltitude = @/targetBody.Children().Last().Radius() / 2.0
            targetBody = @/targetBody.Children().ElementAt(5)

            REQUIREMENT
            {
                type = Expression
                expression= @/targetBody.Children().Count() > 5
            }
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        count = @Tourism:touristCount
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @Tourism:touristCount
            TouristMoonsCount = TouristMoonsCount + @Tourism:touristCount
        }
    }

    REQUIREMENT
    {
        name = Expression
        type = Expression

        expression = TouristMoonsCount > 0 || OrbitedBodies().Count() > 2
    }

    REQUIREMENT
    {
        name = Expression
        type = Expression

        expression = @/targetBody.Children().Count() > 1
    }

    REQUIREMENT
    {
        name = AnyStarter
        type = Any

        REQUIREMENT
        {
            name = CompleteContract
            type = CompleteContract

            contractType = TourismContract
        }

        REQUIREMENT
        {
            name = CompleteContract
            type = CompleteContract

            contractType = Tourism_FirstTourist
        }
    }
}
